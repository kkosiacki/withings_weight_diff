import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { withModule } from '@angular/core/testing';
import { BehaviorSubject, map, tap } from 'rxjs';
import { environment } from 'src/environments/environment';

export class WithingsMeasurment {
	private _grpid:number;
	private _attrib:number;
	private _value:number;
	private _created:Date;
	private _date:Date;

	getValue() {return this._value};
	getDate() {return this._date};
	getCreated() {return this._created};
	getAttrib()  {return this._attrib};
	getGrpId() {return this._grpid}

	setGrpId(grpid:number) {this._grpid = grpid};
	setAttrib(attrib:number) {this._attrib = attrib};
	setDate(timestamp:number) {this._date = new Date(timestamp*1000)};
	setCreated(timestamp:number) {this._created = new Date(timestamp*1000)};
	setValue(value:number,unit:number) {this._value = +(value * Math.pow(10,unit)).toFixed(3);}

}

 interface AuthResponse {
  status: number;
  body:   Body;
}

 interface Body {
  userid:        string;
  access_token:  string;
  refresh_token: string;
  expires_in:    number;
  scope:         string;
  csrf_token:    string;
  token_type:    string;
}

// Generated by https://quicktype.io

export interface GetMeasurment {
  status: number;
  body:   MeasurmentBody;
}

export interface MeasurmentBody {
  updatetime:  string;
  timezone:    string;
  measuregrps: Measuregrp[];
  more:        number;
  offset:      number;
}

export interface Measuregrp {
  grpid:    number;
  attrib:   number;
  date:     number;
  created:  number;
  category: number;
  deviceid: string;
  measures: Measure[];
  comment:  string;
}

export interface Measure {
  value: number;
  type:  number;
  unit:  number;
  algo:  number;
  fm:    number;
  fw:    number;
}




@Injectable({
  providedIn: 'root'
})
export class WithingsAuthService {
	private _connected:BehaviorSubject<boolean>;

 	constructor(private _http:HttpClient ) {
      this._connected =  new BehaviorSubject<boolean>(this.ifTokenPresent());
 	}


 	get connected() {
 		return this._connected;
 	}




 	getAuthorizationToken(code:string) {
 		return this._http.post<AuthResponse>(this.tokenUrl,{
      action : 'requesttoken',
 			grant_type:'authorization_code',
      client_id: environment.client_id,
      client_secret: environment.client_secret,
 			code: code,
 			redirect_uri: environment.redirect_url
 		}).pipe(tap(t => {
          localStorage.setItem('refreshToken',t.body.refresh_token);
          localStorage.setItem('accessToken',t.body.access_token);
          localStorage.setItem('tokenRcvDate','' +(new Date()).getTime());
          localStorage.setItem('delay', '' +t.body.expires_in);
        }));
 	}

   get tokenUrl() {
     return environment.withings_url + 'v2/oauth2';
   }

   get measureUrl() {
    return environment.withings_url + 'measure';
  }


   getMeasurment() {

    let date = new Date();
    date.setMonth(date.getMonth() -1);

     let params = new HttpParams()
     .set('action','getmeas')
     .set('access_token',localStorage.getItem('accessToken'))
     .set('meastype', '1')
     .set('lastupdate','' + parseInt("" +date.getTime()/1000) )
     return this._http.get<GetMeasurment>(this.measureUrl,{params:params} ).pipe(
       map(t => {
         let returnMess:WithingsMeasurment[] = new Array<WithingsMeasurment>();
         let mesuArray = t.body.measuregrps;
         console.log(JSON.stringify(mesuArray));
         mesuArray.forEach(meas => {
            let wm = new WithingsMeasurment();
              wm.setAttrib(Math.random() >0.5 ? 0: 1);
              wm.setCreated(meas.created);
              wm.setDate(meas.date);
              wm.setValue(meas.measures[0].value,meas.measures[0].unit);
              wm.setGrpId(meas.grpid);
              returnMess.push(wm)


         });
         return returnMess.reverse();
        })
     )
   }



  getRefreshToken(refresh:string) {

    return this._http.post<AuthResponse>(this.tokenUrl +'',{
      action : 'requesttoken',
       grant_type:'refresh_token',
       client_id: environment.client_id,
      client_secret: environment.client_secret,
       refresh_token: refresh,

     }).pipe(tap(t => {
      localStorage.setItem('refreshToken',t.body.refresh_token);
      localStorage.setItem('accessToken',t.body.access_token);
      localStorage.setItem('tokenRcvDate','' +(new Date()).getTime());
      localStorage.setItem('delay', '' +t.body.expires_in);
        }));

  }

	public checkConnection() {
    	if(this.ifTokenPresent() &&this.isValid()) {
        this._connected.next(true);
        this.refresh();
    	} else {
    		return this._connected.next(false);
    	}
  	}


  	public ifTokenPresent():boolean {
  		let refreshToken = localStorage.getItem('accessToken');
      if(refreshToken) {
        return true;
      }
  		return false;

  	}

    public isValid() {
      let time = +localStorage.getItem('tokenRcvDate');
      let delay = +localStorage.getItem('delay') * 1000;
      let now = (new Date()).getTime();
      if(time && delay) {
        return now < time + delay;
      }
      return false
    }

    private refresh() {
        this.getRefreshToken(localStorage.getItem('refreshToken')).subscribe(
          t=> console.log('ok'),
          err => {
            this.cleanStore();
             this._connected.next(false)
           }
          );
    }

    private cleanStore() {
      localStorage.removeItem('refreshToken');
      localStorage.removeItem('accessToken');
      localStorage.removeItem('tokenRcvDate');
      localStorage.removeItem('delay');
    }


}
